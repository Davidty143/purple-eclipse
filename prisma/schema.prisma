generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  account_id         String         @id @default(uuid()) @db.Uuid
  account_username   String?        @unique
  account_email      String?        @unique   
  account_status     AccountStatus?
  account_avatar_url         String?
  account_is_deleted Boolean?
  account_role_id    String?        @db.Uuid
  account_role       Role?          @relation(fields: [account_role_id], references: [role_id])
  comments           Comment[]
  threads            Thread[]
}

model Role {
  role_id    String      @id @default(uuid()) @db.Uuid
  role_type  RoleType?   @unique
  accounts   Account[]
  previleges Previlage[] @relation("PrevilageToRole")
}

model Previlage {
  previlege_id          String  @id @default(uuid()) @db.Uuid
  previlege_name        String?
  previlege_description String?
  roles                 Role[]  @relation("PrevilageToRole")
}

model Forum {
  forum_name        String?    @unique
  forum_description String?
  forum_created     DateTime   @default(now())   @map("forum_created") @db.Timestamptz(6)
  forum_modified    DateTime   @updatedAt @map("forum_modified") @db.Timestamptz(6)
  forum_id          Int        @id @default(autoincrement())
  forum_is_deleted  Boolean    @default(false) @map("forum_deleted")
  subforums         Subforum[]

  @@map("Forum")
}

model Subforum {
  subforum_id          Int      @id @default(autoincrement())
  subforum_name        String?  @unique
  subforum_description String?
  subforum_created     DateTime @default(now()) @map("subforum_created") @db.Timestamptz(6)
  subforum_modified    DateTime @updatedAt @map("subforum_modified") @db.Timestamptz(6)
  subforum_icon        String?  @map("subforum_icon")
  forum_id             Int      @map("forum_id")
  subforum_is_deleted  Boolean  @default(false) @map("subforum_deleted")
  forum                Forum    @relation(fields: [forum_id], references: [forum_id])
  threads              Thread[]
}

model Thread {
  thread_id        Int           @id @default(autoincrement())
  thread_title     String
  thread_content   String
  thread_isDeleted Boolean       @default(false) @map("thread_deleted")
  thread_created   DateTime      @default(now()) @map("thread_created") @db.Timestamptz(6)
  thread_modified  DateTime      @updatedAt @map("thread_modified") @db.Timestamptz(6)
  subforum_id      Int           @map("subforum_id")
  author_id        String        @map("author_id") @db.Uuid
  comments         Comment[]
  author           Account       @relation(fields: [author_id], references: [account_id])
  subforum         Subforum      @relation(fields: [subforum_id], references: [subforum_id])
  images           ThreadImage[]

  @@index([author_id])
  @@map("Thread")
}

model Comment {
  comment_id        Int      @id @default(autoincrement())
  comment_content   String
  comment_isDeleted Boolean  @default(false) @map("comment_deleted")
  comment_created   DateTime @default(now()) @map("comment_created") @db.Timestamptz(6)
  comment_modified  DateTime @updatedAt @map("comment_modified") @db.Timestamptz(6)
  thread_id         Int      @map("thread_id")
  author_id         String   @map("author_id") @db.Uuid
  parent_comment_id Int?     @map("parent_comment_id")
  author            Account  @relation(fields: [author_id], references: [account_id])
  thread            Thread   @relation(fields: [thread_id], references: [thread_id])
  parent            Comment? @relation("CommentToReply", fields: [parent_comment_id], references: [comment_id])
  replies           Comment[] @relation("CommentToReply")

  @@index([thread_id])
  @@index([author_id])
  @@index([parent_comment_id])
}

model ThreadImage {
  thread_image_id      Int      @id @default(autoincrement())
  thread_image_url     String   @map("image_url")
  thread_image_path    String   @map("storage_path")
  thread_image_created DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  thread_id            Int      @map("thread_id")
  thread               Thread   @relation(fields: [thread_id], references: [thread_id])

  @@index([thread_id])
  @@map("thread_image")
}

enum AccountStatus {
  ACTIVE
  BANNED
  RESTRICTED
  PENDING_VERIFICATION
}

enum RoleType {
  ADMIN
  USER
  GUEST
}
